package RT;


import MO.ManagedObject;

import java.io.Serializable;
import java.util.BitSet;

public class BloomFilter implements Serializable, Comparable<Object>
{
	private static int[] bloomSettings=new int[]{27, 18, 53, 18, 80, 18, 106, 18, 132, 18, 158, 18, 184, 18, 211, 17, 237, 17, 263, 17, 289, 18, 316, 17, 342, 17, 368, 17, 394, 18, 420, 18, 447, 17, 473, 17, 499, 18, 525, 18, 551, 18, 578, 17, 604, 18, 630, 18, 656, 18, 682, 18, 709, 18, 735, 18, 761, 18, 787, 18, 813, 18, 840, 18, 866, 18, 892, 18, 918, 18, 945, 18, 971, 18, 997, 18, 1023, 18, 1049, 18, 1076, 18, 1102, 18, 1128, 18, 1154, 18, 1180, 18, 1207, 18, 1233, 18, 1259, 18, 1285, 18, 1311, 18, 1338, 18, 1364, 18, 1390, 18, 1416, 18, 1442, 18, 1469, 18, 1495, 18, 1521, 18, 1547, 18, 1574, 18, 1600, 18, 1626, 18, 1652, 18, 1678, 18, 1705, 18, 1731, 18, 1757, 18, 1783, 18, 1809, 18, 1836, 18, 1862, 18, 1888, 18, 1914, 18, 1940, 18, 1967, 18, 1993, 18, 2019, 18, 2045, 18, 2071, 18, 2098, 18, 2124, 18, 2150, 18, 2176, 18, 2203, 18, 2229, 18, 2255, 18, 2281, 18, 2307, 18, 2334, 18, 2360, 18, 2386, 18, 2412, 18, 2438, 18, 2465, 18, 2491, 18, 2517, 18, 2543, 18, 2569, 18, 2596, 18, 2622, 18, 2648, 18, 2674, 18, 2700, 18, 2727, 18, 2753, 18, 2779, 18, 2805, 18, 2832, 18, 2858, 18, 2884, 18, 2910, 18, 2936, 18, 2963, 18, 2989, 18, 3015, 18, 3041, 18, 3067, 18, 3094, 18, 3120, 18, 3146, 18, 3172, 18, 3198, 18, 3225, 18, 3251, 18, 3277, 18, 3303, 18, 3330, 18, 3356, 18, 3382, 18, 3408, 18, 3434, 18, 3461, 18, 3487, 18, 3513, 18, 3539, 18, 3565, 18, 3592, 18, 3618, 18, 3644, 18, 3670, 18, 3696, 18, 3723, 18, 3749, 18, 3775, 18, 3801, 18, 3827, 18, 3854, 18, 3880, 18, 3906, 18, 3932, 18, 3959, 18, 3985, 18, 4011, 18, 4037, 18, 4063, 18, 4090, 18, 4116, 18, 4142, 18, 4168, 18, 4194, 18, 4221, 18, 4247, 18, 4273, 18, 4299, 18, 4325, 18, 4352, 18, 4378, 18, 4404, 18, 4430, 18, 4456, 18, 4483, 18, 4509, 18, 4535, 18, 4561, 18, 4588, 18, 4614, 18, 4640, 18, 4666, 18, 4692, 18, 4719, 18, 4745, 18, 4771, 18, 4797, 18, 4823, 18, 4850, 18, 4876, 18, 4902, 18, 4928, 18, 4954, 18, 4981, 18, 5007, 18, 5033, 18, 5059, 18, 5085, 18, 5112, 18, 5138, 18, 5164, 18, 5190, 18, 5217, 18, 5243, 18, 5269, 18, 5295, 18, 5321, 18, 5348, 18, 5374, 18, 5400, 18, 5426, 18, 5452, 18, 5479, 18, 5505, 18, 5531, 18, 5557, 18, 5583, 18, 5610, 18, 5636, 18, 5662, 18, 5688, 18, 5715, 18, 5741, 18, 5767, 18, 5793, 18, 5819, 18, 5846, 18, 5872, 18, 5898, 18, 5924, 18, 5950, 18, 5977, 18, 6003, 18, 6029, 18, 6055, 18, 6081, 18, 6108, 18, 6134, 18, 6160, 18, 6186, 18, 6212, 18, 6239, 18, 6265, 18, 6291, 18, 6317, 18, 6344, 18, 6370, 18, 6396, 18, 6422, 18, 6448, 18, 6475, 18, 6501, 18, 6527, 18, 6553, 18, 6579, 18, 6606, 18, 6632, 18, 6658, 18, 6684, 18, 6710, 18, 6737, 18, 6763, 18, 6789, 18, 6815, 18, 6841, 18, 6868, 18, 6894, 18, 6920, 18, 6946, 18, 6973, 18, 6999, 18, 7025, 18, 7051, 18, 7077, 18, 7104, 18, 7130, 18, 7156, 18, 7182, 18, 7208, 18, 7235, 18, 7261, 18, 7287, 18, 7313, 18, 7339, 18, 7366, 18, 7392, 18, 7418, 18, 7444, 18, 7470, 18, 7497, 18, 7523, 18, 7549, 18, 7575, 18, 7602, 18, 7628, 18, 7654, 18, 7680, 18, 7706, 18, 7733, 18, 7759, 18, 7785, 18, 7811, 18, 7837, 18, 7864, 18, 7890, 18, 7916, 18, 7942, 18, 7968, 18, 7995, 18, 8021, 18, 8047, 18, 8073, 18, 8099, 18, 8126, 18, 8152, 18, 8178, 18, 8204, 18, 8231, 18, 8257, 18, 8283, 18, 8309, 18, 8335, 18, 8362, 18, 8388, 18, 8414, 18, 8440, 18, 8466, 18, 8493, 18, 8519, 18, 8545, 18, 8571, 18, 8597, 18, 8624, 18, 8650, 18, 8676, 18, 8702, 18, 8729, 18, 8755, 18, 8781, 18, 8807, 18, 8833, 18, 8860, 18, 8886, 18, 8912, 18, 8938, 18, 8964, 18, 8991, 18, 9017, 18, 9043, 18, 9069, 18, 9095, 18, 9122, 18, 9148, 18, 9174, 18, 9200, 18, 9226, 18, 9253, 18, 9279, 18, 9305, 18, 9331, 18, 9358, 18, 9384, 18, 9410, 18, 9436, 18, 9462, 18, 9489, 18, 9515, 18, 9541, 18, 9567, 18, 9593, 18, 9620, 18, 9646, 18, 9672, 18, 9698, 18, 9724, 18, 9751, 18, 9777, 18, 9803, 18, 9829, 18, 9855, 18, 9882, 18, 9908, 18, 9934, 18, 9960, 18, 9987, 18, 10013, 18, 10039, 18, 10065, 18, 10091, 18, 10118, 18, 10144, 18, 10170, 18, 10196, 18, 10222, 18, 10249, 18, 10275, 18, 10301, 18, 10327, 18, 10353, 18, 10380, 18, 10406, 18, 10432, 18, 10458, 18, 10484, 18, 10511, 18, 10537, 18, 10563, 18, 10589, 18, 10616, 18, 10642, 18, 10668, 18, 10694, 18, 10720, 18, 10747, 18, 10773, 18, 10799, 18, 10825, 18, 10851, 18, 10878, 18, 10904, 18, 10930, 18, 10956, 18, 10982, 18, 11009, 18, 11035, 18, 11061, 18, 11087, 18, 11114, 18, 11140, 18, 11166, 18, 11192, 18, 11218, 18, 11245, 18, 11271, 18, 11297, 18, 11323, 18, 11349, 18, 11376, 18, 11402, 18, 11428, 18, 11454, 18, 11480, 18, 11507, 18, 11533, 18, 11559, 18, 11585, 18, 11611, 18, 11638, 18, 11664, 18, 11690, 18, 11716, 18, 11743, 18, 11769, 18, 11795, 18, 11821, 18, 11847, 18, 11874, 18, 11900, 18, 11926, 18, 11952, 18, 11978, 18, 12005, 18, 12031, 18, 12057, 18, 12083, 18, 12109, 18, 12136, 18, 12162, 18, 12188, 18, 12214, 18, 12240, 18, 12267, 18, 12293, 18, 12319, 18, 12345, 18, 12372, 18, 12398, 18, 12424, 18, 12450, 18, 12476, 18, 12503, 18, 12529, 18, 12555, 18, 12581, 18, 12607, 18, 12634, 18, 12660, 18, 12686, 18, 12712, 18, 12738, 18, 12765, 18, 12791, 18, 12817, 18, 12843, 18, 12869, 18, 12896, 18, 12922, 18, 12948, 18, 12974, 18, 13001, 18, 13027, 18, 13053, 18, 13079, 18, 13105, 18, 13132, 18, 13158, 18, 13184, 18, 13210, 18, 13236, 18, 13263, 18, 13289, 18, 13315, 18, 13341, 18, 13367, 18, 13394, 18, 13420, 18, 13446, 18, 13472, 18, 13498, 18, 13525, 18, 13551, 18, 13577, 18, 13603, 18, 13630, 18, 13656, 18, 13682, 18, 13708, 18, 13734, 18, 13761, 18, 13787, 18, 13813, 18, 13839, 18, 13865, 18, 13892, 18, 13918, 18, 13944, 18, 13970, 18, 13996, 18, 14023, 18, 14049, 18, 14075, 18, 14101, 18, 14128, 18, 14154, 18, 14180, 18, 14206, 18, 14232, 18, 14259, 18, 14285, 18, 14311, 18, 14337, 18, 14363, 18, 14390, 18, 14416, 18, 14442, 18, 14468, 18, 14494, 18, 14521, 18, 14547, 18, 14573, 18, 14599, 18, 14625, 18, 14652, 18, 14678, 18, 14704, 18, 14730, 18, 14757, 18, 14783, 18, 14809, 18, 14835, 18, 14861, 18, 14888, 18, 14914, 18, 14940, 18, 14966, 18, 14992, 18, 15019, 18, 15045, 18, 15071, 18, 15097, 18, 15123, 18, 15150, 18, 15176, 18, 15202, 18, 15228, 18, 15254, 18, 15281, 18, 15307, 18, 15333, 18, 15359, 18, 15386, 18, 15412, 18, 15438, 18, 15464, 18, 15490, 18, 15517, 18, 15543, 18, 15569, 18, 15595, 18, 15621, 18, 15648, 18, 15674, 18, 15700, 18, 15726, 18, 15752, 18, 15779, 18, 15805, 18, 15831, 18, 15857, 18, 15883, 18, 15910, 18, 15936, 18, 15962, 18, 15988, 18, 16015, 18, 16041, 18, 16067, 18, 16093, 18, 16119, 18, 16146, 18, 16172, 18, 16198, 18, 16224, 18, 16250, 18, 16277, 18, 16303, 18, 16329, 18, 16355, 18, 16381, 18, 16408, 18, 16434, 18, 16460, 18, 16486, 18, 16512, 18, 16539, 18, 16565, 18, 16591, 18, 16617, 18, 16644, 18, 16670, 18, 16696, 18, 16722, 18, 16748, 18, 16775, 18, 16801, 18, 16827, 18, 16853, 18, 16879, 18, 16906, 18, 16932, 18, 16958, 18, 16984, 18, 17010, 18, 17037, 18, 17063, 18, 17089, 18, 17115, 18, 17142, 18, 17168, 18, 17194, 18, 17220, 18, 17246, 18, 17273, 18, 17299, 18, 17325, 18, 17351, 18, 17377, 18, 17404, 18, 17430, 18, 17456, 18, 17482, 18, 17508, 18, 17535, 18, 17561, 18, 17587, 18, 17613, 18, 17639, 18, 17666, 18, 17692, 18, 17718, 18, 17744, 18, 17771, 18, 17797, 18, 17823, 18, 17849, 18, 17875, 18, 17902, 18, 17928, 18, 17954, 18, 17980, 18, 18006, 18, 18033, 18, 18059, 18, 18085, 18, 18111, 18, 18137, 18, 18164, 18, 18190, 18, 18216, 18, 18242, 18, 18268, 18, 18295, 18, 18321, 18, 18347, 18, 18373, 18, 18400, 18, 18426, 18, 18452, 18, 18478, 18, 18504, 18, 18531, 18, 18557, 18, 18583, 18, 18609, 18, 18635, 18, 18662, 18, 18688, 18, 18714, 18, 18740, 18, 18766, 18, 18793, 18, 18819, 18, 18845, 18, 18871, 18, 18897, 18, 18924, 18, 18950, 18, 18976, 18, 19002, 18, 19029, 18, 19055, 18, 19081, 18, 19107, 18, 19133, 18, 19160, 18, 19186, 18, 19212, 18, 19238, 18, 19264, 18, 19291, 18, 19317, 18, 19343, 18, 19369, 18, 19395, 18, 19422, 18, 19448, 18, 19474, 18, 19500, 18, 19527, 18, 19553, 18, 19579, 18, 19605, 18, 19631, 18, 19658, 18, 19684, 18, 19710, 18, 19736, 18, 19762, 18, 19789, 18, 19815, 18, 19841, 18, 19867, 18, 19893, 18, 19920, 18, 19946, 18, 19972, 18, 19998, 18, 20024, 18, 20051, 18, 20077, 18, 20103, 18, 20129, 18, 20156, 18, 20182, 18, 20208, 18, 20234, 18, 20260, 18, 20287, 18, 20313, 18, 20339, 18, 20365, 18, 20391, 18, 20418, 18, 20444, 18, 20470, 18, 20496, 18, 20522, 18, 20549, 18, 20575, 18, 20601, 18, 20627, 18, 20653, 18, 20680, 18, 20706, 18, 20732, 18, 20758, 18, 20785, 18, 20811, 18, 20837, 18, 20863, 18, 20889, 18, 20916, 18, 20942, 18, 20968, 18, 20994, 18, 21020, 18, 21047, 18, 21073, 18, 21099, 18, 21125, 18, 21151, 18, 21178, 18, 21204, 18, 21230, 18, 21256, 18, 21282, 18, 21309, 18, 21335, 18, 21361, 18, 21387, 18, 21414, 18, 21440, 18, 21466, 18, 21492, 18, 21518, 18, 21545, 18, 21571, 18, 21597, 18, 21623, 18, 21649, 18, 21676, 18, 21702, 18, 21728, 18, 21754, 18, 21780, 18, 21807, 18, 21833, 18, 21859, 18, 21885, 18, 21911, 18, 21938, 18, 21964, 18, 21990, 18, 22016, 18, 22043, 18, 22069, 18, 22095, 18, 22121, 18, 22147, 18, 22174, 18, 22200, 18, 22226, 18, 22252, 18, 22278, 18, 22305, 18, 22331, 18, 22357, 18, 22383, 18, 22409, 18, 22436, 18, 22462, 18, 22488, 18, 22514, 18, 22541, 18, 22567, 18, 22593, 18, 22619, 18, 22645, 18, 22672, 18, 22698, 18, 22724, 18, 22750, 18, 22776, 18, 22803, 18, 22829, 18, 22855, 18, 22881, 18, 22907, 18, 22934, 18, 22960, 18, 22986, 18, 23012, 18, 23038, 18, 23065, 18, 23091, 18, 23117, 18, 23143, 18, 23170, 18, 23196, 18, 23222, 18, 23248, 18, 23274, 18, 23301, 18, 23327, 18, 23353, 18, 23379, 18, 23405, 18, 23432, 18, 23458, 18, 23484, 18, 23510, 18, 23536, 18, 23563, 18, 23589, 18, 23615, 18, 23641, 18, 23667, 18, 23694, 18, 23720, 18, 23746, 18, 23772, 18, 23799, 18, 23825, 18, 23851, 18, 23877, 18, 23903, 18, 23930, 18, 23956, 18, 23982, 18, 24008, 18, 24034, 18, 24061, 18, 24087, 18, 24113, 18, 24139, 18, 24165, 18, 24192, 18, 24218, 18, 24244, 18, 24270, 18, 24296, 18, 24323, 18, 24349, 18, 24375, 18, 24401, 18, 24428, 18, 24454, 18, 24480, 18, 24506, 18, 24532, 18, 24559, 18, 24585, 18, 24611, 18, 24637, 18, 24663, 18, 24690, 18, 24716, 18, 24742, 18, 24768, 18, 24794, 18, 24821, 18, 24847, 18, 24873, 18, 24899, 18, 24925, 18, 24952, 18, 24978, 18, 25004, 18, 25030, 18, 25057, 18, 25083, 18, 25109, 18, 25135, 18, 25161, 18, 25188, 18, 25214, 18, 25240, 18, 25266, 18, 25292, 18, 25319, 18, 25345, 18, 25371, 18, 25397, 18, 25423, 18, 25450, 18, 25476, 18, 25502, 18, 25528, 18, 25555, 18, 25581, 18, 25607, 18, 25633, 18, 25659, 18, 25686, 18, 25712, 18, 25738, 18, 25764, 18, 25790, 18, 25817, 18, 25843, 18, 25869, 18, 25895, 18, 25921, 18, 25948, 18, 25974, 18, 26000, 18, 26026, 18, 26052, 18, 26079, 18, 26105, 18, 26131, 18, 26157, 18, 26184, 18};
	private long[] bits;
	
	public BloomFilter(int numExpected)
	{
		if(2*(numExpected-1)>=bloomSettings.length)
		{
			bits=new long[(((int)Math.ceil(numExpected*26.20804691)-1)>>6)+1];
		}
		else
		{
			bits=new long[((bloomSettings[2*(numExpected-1)]-1)>>6)+1];
		}				
	}
	
	public void addToFilterNode(int a, int b)
	{
        set(((a) & 2147483647)%(bits.length<<6));
        set(((a+b) & 2147483647)%(bits.length<<6));
        set(((a+b*2) & 2147483647)%(bits.length<<6));
        set(((a+b*3) & 2147483647)%(bits.length<<6));
        set(((a+b*4) & 2147483647)%(bits.length<<6));
        set(((a+b*5) & 2147483647)%(bits.length<<6));
        set(((a+b*6) & 2147483647)%(bits.length<<6));
        set(((a+b*7) & 2147483647)%(bits.length<<6));
        set(((a+b*8) & 2147483647)%(bits.length<<6));
        set(((a+b*9) & 2147483647)%(bits.length<<6));
        set(((a+b*10) & 2147483647)%(bits.length<<6));
        set(((a+b*11) & 2147483647)%(bits.length<<6));
        set(((a+b*12) & 2147483647)%(bits.length<<6));
        set(((a+b*13) & 2147483647)%(bits.length<<6));
        set(((a+b*14) & 2147483647)%(bits.length<<6));
        set(((a+b*15) & 2147483647)%(bits.length<<6));
        set(((a+b*16) & 2147483647)%(bits.length<<6));
        set(((a+b*17) & 2147483647)%(bits.length<<6));
	}
	
	public boolean checkIfInFilterNode(int a, int b)
	{	
		return get(((a) & 2147483647)%(bits.length<<6))
                        && get(((a+b) & 2147483647)%(bits.length<<6)) 
                        && get(((a+b*2) & 2147483647)%(bits.length<<6))
                        && get(((a+b*3) & 2147483647)%(bits.length<<6))
                        && get(((a+b*4) & 2147483647)%(bits.length<<6))
                        && get(((a+b*5) & 2147483647)%(bits.length<<6))
                        && get(((a+b*6) & 2147483647)%(bits.length<<6))
                        && get(((a+b*7) & 2147483647)%(bits.length<<6))
                        && get(((a+b*8) & 2147483647)%(bits.length<<6))
                        && get(((a+b*9) & 2147483647)%(bits.length<<6))
                        && get(((a+b*10) & 2147483647)%(bits.length<<6))
                        && get(((a+b*11) & 2147483647)%(bits.length<<6))
                        && get(((a+b*12) & 2147483647)%(bits.length<<6))
                        && get(((a+b*13) & 2147483647)%(bits.length<<6))
                        && get(((a+b*14) & 2147483647)%(bits.length<<6))
                        && get(((a+b*15) & 2147483647)%(bits.length<<6))
                        && get(((a+b*16) & 2147483647)%(bits.length<<6))
                        && get(((a+b*17) & 2147483647)%(bits.length<<6));
	}
	
	public void addToFilterNode(Node toAdd)
	{
		int toAddAttributes15=toAdd.mO.getAttribute15();
		int toAddAttributes16=toAdd.mO.getAttribute16();
        set(((toAddAttributes15) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*2) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*3) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*4) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*5) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*6) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*7) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*8) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*9) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*10) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*11) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*12) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*13) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*14) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*15) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*16) & 2147483647)%(bits.length<<6));
        set(((toAddAttributes15+toAddAttributes16*17) & 2147483647)%(bits.length<<6));
	}
	
	public boolean checkIfInFilterNode(Node toCheck)
	{	
		int toCheckAttributes15=toCheck.mO.getAttribute15();
		int toCheckAttributes16=toCheck.mO.getAttribute16();
		return get(((toCheckAttributes15) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16) & 2147483647)%(bits.length<<6)) 
                        && get(((toCheckAttributes15+toCheckAttributes16*2) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*3) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*4) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*5) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*6) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*7) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*8) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*9) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*10) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*11) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*12) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*13) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*14) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*15) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*16) & 2147483647)%(bits.length<<6))
                        && get(((toCheckAttributes15+toCheckAttributes16*17) & 2147483647)%(bits.length<<6));
	}
        
        boolean get(int index)
        {
            return (bits[index>>6] & 1L<<index)!=0;
        }
        
        void set(int index)
        {
            bits[index>>6]|=(1L<<index);
        }

		@Override
		public int compareTo(Object o) 
		{
			if(o instanceof BloomFilter)
			{
				long distance=0;
				for(int bitNum=0; bitNum<(bits.length<<6) && bitNum<(((BloomFilter)o).bits.length<<6); bitNum++)
				{
					if(get(bitNum)!=((BloomFilter)o).get(bitNum))
					{
						distance++;
					}
				}
				distance+=10*Math.abs(bits.length-((BloomFilter)o).bits.length);
				if(distance>Integer.MAX_VALUE)
				{
					return Integer.MAX_VALUE;
				}
				else
				{
					return (int)distance;				
				}

			}
			return Integer.MAX_VALUE;
		}

}