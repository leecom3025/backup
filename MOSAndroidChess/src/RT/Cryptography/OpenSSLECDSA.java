package RT.Cryptography;





import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.util.Random;

public class OpenSSLECDSA
{

    public static void main(String[] args) throws SignatureException, InvalidKeyException, NoSuchAlgorithmException, NoSuchProviderException
    {
    	//testOpenSSLECDSASpeed();
    	//testOpenSSLECDSA(new byte[]{1,2,3,4,5,6});
    	testOpenSSLECDSACorrectness(new byte[]{1,2,3,4,5,6});
    }
    
    /*
     * Finds the time to initialize and sign using 1000 ECDSAs
     */
    public static void testOpenSSLECDSASpeed() throws SignatureException, InvalidKeyException, NoSuchAlgorithmException, NoSuchProviderException
    {
    	Random random=new Random();
		byte[] message=new byte[250000];
		random.nextBytes(message);
    	byte[] key=new byte[]{48, -126, 4, 127, 2, 1, 0, 48, 16, 6, 7, 42, -122, 72, -50, 61, 2, 1, 6, 5, 43, -127, 4, 0, 17, 4, -126, 4, 102, 48, -126, 4, 98, 2, 1, 1, 4, -126, 4, 82, 48, -126, 4, 78, 2, 1, 0, 48, -126, 1, -71, 6, 7, 42, -122, 72, -50, 61, 2, 1, 48, -126, 1, -84, 2, 1, 1, 48, 77, 6, 7, 42, -122, 72, -50, 61, 1, 1, 2, 66, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -127, -120, 4, 66, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -4, 4, 66, 0, 81, -107, 62, -71, 97, -114, 28, -102, 31, -110, -102, 33, -96, -74, -123, 64, -18, -94, -38, 114, 91, -103, -77, 21, -13, -72, -76, -119, -111, -114, -15, 9, -31, 86, 25, 57, 81, -20, 126, -109, 123, 22, 82, -64, -67, 59, -79, -65, 7, 53, 115, -33, -120, 61, 44, 52, -15, -17, 69, 31, -44, 107, 80, 63, 0, 4, -127, -123, 4, 0, -58, -123, -114, 6, -73, 4, 4, -23, -51, -98, 62, -53, 102, 35, -107, -76, 66, -100, 100, -127, 57, 5, 63, -75, 33, -8, 40, -81, 96, 107, 77, 61, -70, -95, 75, 94, 119, -17, -25, 89, 40, -2, 29, -63, 39, -94, -1, -88, -34, 51, 72, -77, -63, -123, 106, 66, -101, -7, 126, 126, 49, -62, -27, -67, 102, 1, 24, 57, 41, 106, 120, -102, 59, -64, 4, 92, -118, 95, -76, 44, 125, 27, -39, -104, -11, 68, 73, 87, -101, 68, 104, 23, -81, -67, 23, 39, 62, 102, 44, -105, -18, 114, -103, 94, -12, 38, 64, -59, 80, -71, 1, 63, -83, 7, 97, 53, 60, 112, -122, -94, 114, -62, 64, -120, -66, -108, 118, -97, -47, 102, 80, 2, 66, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -6, 81, -122, -121, -125, -65, 47, -106, 107, 127, -52, 1, 72, -9, 9, -91, -48, 59, -75, -55, -72, -119, -100, 71, -82, -69, 111, -73, 30, -111, 56, 100, 9, 2, 1, 1, 4, -126, 2, -118, 48, -126, 2, -122, 2, 1, 1, 4, 65, -15, -69, 80, 125, -4, 0, 110, 61, 100, 70, 116, 123, 13, -44, -50, -32, -58, -99, -128, -12, 32, -121, 46, -114, -80, 45, 8, -49, -98, 105, -71, -89, 113, -19, -107, 77, -117, -67, -43, 88, 22, -115, -43, 104, 54, 52, -72, -54, -103, -69, 96, -38, -92, 87, -120, -6, 40, -14, 96, 42, 87, -18, 121, -73, 112, -96, -126, 1, -80, 48, -126, 1, -84, 2, 1, 1, 48, 77, 6, 7, 42, -122, 72, -50, 61, 1, 1, 2, 66, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -127, -120, 4, 66, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -4, 4, 66, 0, 81, -107, 62, -71, 97, -114, 28, -102, 31, -110, -102, 33, -96, -74, -123, 64, -18, -94, -38, 114, 91, -103, -77, 21, -13, -72, -76, -119, -111, -114, -15, 9, -31, 86, 25, 57, 81, -20, 126, -109, 123, 22, 82, -64, -67, 59, -79, -65, 7, 53, 115, -33, -120, 61, 44, 52, -15, -17, 69, 31, -44, 107, 80, 63, 0, 4, -127, -123, 4, 0, -58, -123, -114, 6, -73, 4, 4, -23, -51, -98, 62, -53, 102, 35, -107, -76, 66, -100, 100, -127, 57, 5, 63, -75, 33, -8, 40, -81, 96, 107, 77, 61, -70, -95, 75, 94, 119, -17, -25, 89, 40, -2, 29, -63, 39, -94, -1, -88, -34, 51, 72, -77, -63, -123, 106, 66, -101, -7, 126, 126, 49, -62, -27, -67, 102, 1, 24, 57, 41, 106, 120, -102, 59, -64, 4, 92, -118, 95, -76, 44, 125, 27, -39, -104, -11, 68, 73, 87, -101, 68, 104, 23, -81, -67, 23, 39, 62, 102, 44, -105, -18, 114, -103, 94, -12, 38, 64, -59, 80, -71, 1, 63, -83, 7, 97, 53, 60, 112, -122, -94, 114, -62, 64, -120, -66, -108, 118, -97, -47, 102, 80, 2, 66, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -6, 81, -122, -121, -125, -65, 47, -106, 107, 127, -52, 1, 72, -9, 9, -91, -48, 59, -75, -55, -72, -119, -100, 71, -82, -69, 111, -73, 30, -111, 56, 100, 9, 2, 1, 1, -95, -127, -119, 3, -127, -122, 0, 4, 1, -87, 105, -128, 39, -23, -92, -91, 119, -72, 9, 99, 53, 22, 16, 48, -116, -31, -11, 24, -40, -44, -21, 73, -12, 38, -37, 52, 56, -123, -56, -124, -63, -54, 30, -58, -47, -115, 127, 15, 52, 69, 25, 15, 39, 82, 2, 64, -51, -94, 115, -43, 8, 54, -8, -82, -37, -20, -54, 37, -69, -23, 110, 13, -48, 7, 0, 97, 47, -19, 118, 48, 7, 111, -78, 75, -79, -43, 38, -19, -93, 117, -66, -70, 112, -57, -36, 34, -45, 77, -54, 92, -4, -57, 1, -30, 55, 56, -67, 79, -91, -108, 65, 69, -106, -19, -88, -73, -94, 68, -58, -64, 45, 122, -120, 66, -126, 106, 102, -14, -13, -49, 89, 93, 118, -61, 52, -121, 94, -17, -86, 14, -96, 7, 6, 5, 43, -127, 4, 0, 17};
    	
    	long time=System.nanoTime();
    	for(int i=0; i<1000; i++)
    	{
	    	OpenSSLECDSA openSSLECDSA=new OpenSSLECDSA();
	    	openSSLECDSA.testInit(key);
	    	openSSLECDSA.update(message);
	    	openSSLECDSA.sign();
    	}
    	time=System.nanoTime()-time;
    	System.out.println(time);
    }
    
    /*
     * Tests if the signature of a message correctly verifies. Most important test.
     */
    public static void testOpenSSLECDSACorrectness(byte[] toTest) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException
	{
    	byte privateKey[]=new byte[]{48,-126,4,78,2,1,0,48,-126,1,-71,6,7,42,-122,72,-50,61,2,1,48,-126,1,-84,2,1,1,48,77,6,7,42,-122,72,-50,61,1,1,2,66,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,48,-127,-120,4,66,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-4,4,66,0,81,-107,62,-71,97,-114,28,-102,31,-110,-102,33,-96,-74,-123,64,-18,-94,-38,114,91,-103,-77,21,-13,-72,-76,-119,-111,-114,-15,9,-31,86,25,57,81,-20,126,-109,123,22,82,-64,-67,59,-79,-65,7,53,115,-33,-120,61,44,52,-15,-17,69,31,-44,107,80,63,0,4,-127,-123,4,0,-58,-123,-114,6,-73,4,4,-23,-51,-98,62,-53,102,35,-107,-76,66,-100,100,-127,57,5,63,-75,33,-8,40,-81,96,107,77,61,-70,-95,75,94,119,-17,-25,89,40,-2,29,-63,39,-94,-1,-88,-34,51,72,-77,-63,-123,106,66,-101,-7,126,126,49,-62,-27,-67,102,1,24,57,41,106,120,-102,59,-64,4,92,-118,95,-76,44,125,27,-39,-104,-11,68,73,87,-101,68,104,23,-81,-67,23,39,62,102,44,-105,-18,114,-103,94,-12,38,64,-59,80,-71,1,63,-83,7,97,53,60,112,-122,-94,114,-62,64,-120,-66,-108,118,-97,-47,102,80,2,66,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6,81,-122,-121,-125,-65,47,-106,107,127,-52,1,72,-9,9,-91,-48,59,-75,-55,-72,-119,-100,71,-82,-69,111,-73,30,-111,56,100,9,2,1,1,4,-126,2,-118,48,-126,2,-122,2,1,1,4,65,-15,-69,80,125,-4,0,110,61,100,70,116,123,13,-44,-50,-32,-58,-99,-128,-12,32,-121,46,-114,-80,45,8,-49,-98,105,-71,-89,113,-19,-107,77,-117,-67,-43,88,22,-115,-43,104,54,52,-72,-54,-103,-69,96,-38,-92,87,-120,-6,40,-14,96,42,87,-18,121,-73,112,-96,-126,1,-80,48,-126,1,-84,2,1,1,48,77,6,7,42,-122,72,-50,61,1,1,2,66,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,48,-127,-120,4,66,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-4,4,66,0,81,-107,62,-71,97,-114,28,-102,31,-110,-102,33,-96,-74,-123,64,-18,-94,-38,114,91,-103,-77,21,-13,-72,-76,-119,-111,-114,-15,9,-31,86,25,57,81,-20,126,-109,123,22,82,-64,-67,59,-79,-65,7,53,115,-33,-120,61,44,52,-15,-17,69,31,-44,107,80,63,0,4,-127,-123,4,0,-58,-123,-114,6,-73,4,4,-23,-51,-98,62,-53,102,35,-107,-76,66,-100,100,-127,57,5,63,-75,33,-8,40,-81,96,107,77,61,-70,-95,75,94,119,-17,-25,89,40,-2,29,-63,39,-94,-1,-88,-34,51,72,-77,-63,-123,106,66,-101,-7,126,126,49,-62,-27,-67,102,1,24,57,41,106,120,-102,59,-64,4,92,-118,95,-76,44,125,27,-39,-104,-11,68,73,87,-101,68,104,23,-81,-67,23,39,62,102,44,-105,-18,114,-103,94,-12,38,64,-59,80,-71,1,63,-83,7,97,53,60,112,-122,-94,114,-62,64,-120,-66,-108,118,-97,-47,102,80,2,66,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6,81,-122,-121,-125,-65,47,-106,107,127,-52,1,72,-9,9,-91,-48,59,-75,-55,-72,-119,-100,71,-82,-69,111,-73,30,-111,56,100,9,2,1,1,-95,-127,-119,3,-127,-122,0,4,1,-87,105,-128,39,-23,-92,-91,119,-72,9,99,53,22,16,48,-116,-31,-11,24,-40,-44,-21,73,-12,38,-37,52,56,-123,-56,-124,-63,-54,30,-58,-47,-115,127,15,52,69,25,15,39,82,2,64,-51,-94,115,-43,8,54,-8,-82,-37,-20,-54,37,-69,-23,110,13,-48,7,0,97,47,-19,118,48,7,111,-78,75,-79,-43,38,-19,-93,117,-66,-70,112,-57,-36,34,-45,77,-54,92,-4,-57,1,-30,55,56,-67,79,-91,-108,65,69,-106,-19,-88,-73,-94,68,-58,-64,45,122,-120,66,-126,106,102,-14,-13,-49,89,93,118,-61,52,-121,94,-17,-86,14}; 	
    	OpenSSLECDSA openSSLECDSA=new OpenSSLECDSA();
    	openSSLECDSA.testInit(privateKey);
    	openSSLECDSA.update(toTest);
    	byte[] signature=openSSLECDSA.sign();
		
    	byte[] publicKey=new byte[]{48, 89, 48, 19, 6, 7, 42, -122, 72, -50, 61, 2, 1, 6, 8, 42, -122, 72, -50, 61, 3, 1, 7, 3, 66, 0, 4, -126, 109, 108, 26, 19, 102, -46, 23, -73, -55, -9, -6, 102, 45, 50, 43, -123, 9, -42, -125, -53, 29, -121, -45, 104, -63, -63, 59, -63, -46, -4, -81, 101, -14, -99, -42, -62, -34, 28, -19, 34, -53, 25, -43, 83, -77, -38, -123, -116, 108, -120, -128, -25, 83, -124, -67, 6, 87, 46, -96, 115, -119, -44, -107};
    	OpenSSLECDSA openSSLECDSAVerify=new OpenSSLECDSA();
    	openSSLECDSAVerify.testInitPublic(publicKey);
    	openSSLECDSAVerify.update(toTest);
    	System.out.println(openSSLECDSAVerify.verify(signature));
	}
    
    /*
     * import the c library in 1B-Compilied/jni/ library into Java
     */
	static 
	{
		System.loadLibrary("RT_Cryptography_OpenSSLECDSA");
	}
	
	private byte[] publicKeyBytes;
	private byte[] privateKeyBytes;
	private MessageDigest messageDigest;
	
	public OpenSSLECDSA()
	{
		
	}
	
	public void init(PrivateKey privateKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException
	{
		privateKeyBytes=privateKey.getEncoded();
		messageDigest=MessageDigest.getInstance("SHA-256");
	}
	
	private void testInit(byte[] privateKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException
	{
		privateKeyBytes=privateKey;
		messageDigest=MessageDigest.getInstance("SHA-256");
	}
	
	public void init(PublicKey publicKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException
	{
		publicKeyBytes=new byte[publicKey.getEncoded().length-26];
		System.arraycopy(publicKey.getEncoded(), 26, publicKeyBytes, 0, publicKeyBytes.length);
		messageDigest=MessageDigest.getInstance("SHA-256");
	}
	
	public void testInitPublic(byte[] publicKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException
	{
		publicKeyBytes=new byte[publicKey.length-26];
		System.arraycopy(publicKey, 26, publicKeyBytes, 0, publicKeyBytes.length);
		messageDigest=MessageDigest.getInstance("SHA-256");
	}
	
    public void update(byte[] message) throws SignatureException //TODO: Make sure this considers all updated bytes
    {
    	messageDigest.update(message);
    }
    
    public byte[] sign() throws SignatureException
    {
    	byte[] digest=messageDigest.digest();
    	return openSSLECDSASign(digest, privateKeyBytes);
    }
    
    private native byte[] openSSLECDSASign(byte[] hash, byte[] privateKey);
    
    public boolean verify(byte[] signature) throws SignatureException
    {
    	byte[] digest=messageDigest.digest();
    	if(openSSLECDSAVerify(digest, signature, publicKeyBytes)==1)
    	{
    		return true;
    	}
    	else
    	{
    		return false;
    	}
    }
    
    private native int openSSLECDSAVerify(byte[] hash, byte[] signature, byte[] privateKey);
    
}
